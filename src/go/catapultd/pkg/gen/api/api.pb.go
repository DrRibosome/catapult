// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	JobSpec
	Resources
	TaskSpec
	JobItem
	TaskData
	ServerMessage
	SubmitTaskResponse
	ExecResult
	TaskResult
	TaskRequest
	ExecutorInit
	ExecutorRequest
	Heartbeat
	Shutdown
	ExecutorResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExecResult_Status int32

const (
	ExecResult_SUCCESS ExecResult_Status = 0
	ExecResult_FAIL    ExecResult_Status = 1
)

var ExecResult_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}
var ExecResult_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x ExecResult_Status) String() string {
	return proto.EnumName(ExecResult_Status_name, int32(x))
}
func (ExecResult_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

// JobSpec describes the high level particulars of a job to be executed
type JobSpec struct {
	Name        string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NumTasks    int32      `protobuf:"varint,2,opt,name=num_tasks,json=numTasks" json:"num_tasks,omitempty"`
	Parallelism int32      `protobuf:"varint,3,opt,name=parallelism" json:"parallelism,omitempty"`
	Image       string     `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Resources   *Resources `protobuf:"bytes,5,opt,name=resources" json:"resources,omitempty"`
}

func (m *JobSpec) Reset()                    { *m = JobSpec{} }
func (m *JobSpec) String() string            { return proto.CompactTextString(m) }
func (*JobSpec) ProtoMessage()               {}
func (*JobSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *JobSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JobSpec) GetNumTasks() int32 {
	if m != nil {
		return m.NumTasks
	}
	return 0
}

func (m *JobSpec) GetParallelism() int32 {
	if m != nil {
		return m.Parallelism
	}
	return 0
}

func (m *JobSpec) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *JobSpec) GetResources() *Resources {
	if m != nil {
		return m.Resources
	}
	return nil
}

// task resources
//
// Accepts any k8s parsable resource values
type Resources struct {
	Cpus string `protobuf:"bytes,1,opt,name=cpus" json:"cpus,omitempty"`
	Mem  string `protobuf:"bytes,2,opt,name=mem" json:"mem,omitempty"`
}

func (m *Resources) Reset()                    { *m = Resources{} }
func (m *Resources) String() string            { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()               {}
func (*Resources) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Resources) GetCpus() string {
	if m != nil {
		return m.Cpus
	}
	return ""
}

func (m *Resources) GetMem() string {
	if m != nil {
		return m.Mem
	}
	return ""
}

// TaskSpec describes an individual task to be executed as part of a job
type TaskSpec struct {
	TaskId string    `protobuf:"bytes,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Data   *TaskData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	// command to use when running task
	Command string `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	// number of time a command should be retried on failure
	Retries int32  `protobuf:"varint,4,opt,name=retries" json:"retries,omitempty"`
	RawData []byte `protobuf:"bytes,5,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
}

func (m *TaskSpec) Reset()                    { *m = TaskSpec{} }
func (m *TaskSpec) String() string            { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()               {}
func (*TaskSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TaskSpec) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskSpec) GetData() *TaskData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TaskSpec) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *TaskSpec) GetRetries() int32 {
	if m != nil {
		return m.Retries
	}
	return 0
}

func (m *TaskSpec) GetRawData() []byte {
	if m != nil {
		return m.RawData
	}
	return nil
}

type JobItem struct {
	// Types that are valid to be assigned to Item:
	//	*JobItem_JobSpec
	//	*JobItem_TaskSpec
	Item isJobItem_Item `protobuf_oneof:"item"`
}

func (m *JobItem) Reset()                    { *m = JobItem{} }
func (m *JobItem) String() string            { return proto.CompactTextString(m) }
func (*JobItem) ProtoMessage()               {}
func (*JobItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isJobItem_Item interface {
	isJobItem_Item()
}

type JobItem_JobSpec struct {
	JobSpec *JobSpec `protobuf:"bytes,1,opt,name=job_spec,json=jobSpec,oneof"`
}
type JobItem_TaskSpec struct {
	TaskSpec *TaskSpec `protobuf:"bytes,2,opt,name=task_spec,json=taskSpec,oneof"`
}

func (*JobItem_JobSpec) isJobItem_Item()  {}
func (*JobItem_TaskSpec) isJobItem_Item() {}

func (m *JobItem) GetItem() isJobItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *JobItem) GetJobSpec() *JobSpec {
	if x, ok := m.GetItem().(*JobItem_JobSpec); ok {
		return x.JobSpec
	}
	return nil
}

func (m *JobItem) GetTaskSpec() *TaskSpec {
	if x, ok := m.GetItem().(*JobItem_TaskSpec); ok {
		return x.TaskSpec
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JobItem) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JobItem_OneofMarshaler, _JobItem_OneofUnmarshaler, _JobItem_OneofSizer, []interface{}{
		(*JobItem_JobSpec)(nil),
		(*JobItem_TaskSpec)(nil),
	}
}

func _JobItem_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JobItem)
	// item
	switch x := m.Item.(type) {
	case *JobItem_JobSpec:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.JobSpec); err != nil {
			return err
		}
	case *JobItem_TaskSpec:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaskSpec); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JobItem.Item has unexpected type %T", x)
	}
	return nil
}

func _JobItem_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JobItem)
	switch tag {
	case 1: // item.job_spec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JobSpec)
		err := b.DecodeMessage(msg)
		m.Item = &JobItem_JobSpec{msg}
		return true, err
	case 2: // item.task_spec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaskSpec)
		err := b.DecodeMessage(msg)
		m.Item = &JobItem_TaskSpec{msg}
		return true, err
	default:
		return false, nil
	}
}

func _JobItem_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JobItem)
	// item
	switch x := m.Item.(type) {
	case *JobItem_JobSpec:
		s := proto.Size(x.JobSpec)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *JobItem_TaskSpec:
		s := proto.Size(x.TaskSpec)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TaskData struct {
	Input  string `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *TaskData) Reset()                    { *m = TaskData{} }
func (m *TaskData) String() string            { return proto.CompactTextString(m) }
func (*TaskData) ProtoMessage()               {}
func (*TaskData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskData) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *TaskData) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// message from the sever to be displayed on the client
type ServerMessage struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *ServerMessage) Reset()                    { *m = ServerMessage{} }
func (m *ServerMessage) String() string            { return proto.CompactTextString(m) }
func (*ServerMessage) ProtoMessage()               {}
func (*ServerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServerMessage) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SubmitTaskResponse struct {
	// Types that are valid to be assigned to Response:
	//	*SubmitTaskResponse_Result
	//	*SubmitTaskResponse_Msg
	//	*SubmitTaskResponse_Heartbeat
	Response isSubmitTaskResponse_Response `protobuf_oneof:"response"`
}

func (m *SubmitTaskResponse) Reset()                    { *m = SubmitTaskResponse{} }
func (m *SubmitTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitTaskResponse) ProtoMessage()               {}
func (*SubmitTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isSubmitTaskResponse_Response interface {
	isSubmitTaskResponse_Response()
}

type SubmitTaskResponse_Result struct {
	Result *TaskResult `protobuf:"bytes,1,opt,name=result,oneof"`
}
type SubmitTaskResponse_Msg struct {
	Msg *ServerMessage `protobuf:"bytes,2,opt,name=msg,oneof"`
}
type SubmitTaskResponse_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,oneof"`
}

func (*SubmitTaskResponse_Result) isSubmitTaskResponse_Response()    {}
func (*SubmitTaskResponse_Msg) isSubmitTaskResponse_Response()       {}
func (*SubmitTaskResponse_Heartbeat) isSubmitTaskResponse_Response() {}

func (m *SubmitTaskResponse) GetResponse() isSubmitTaskResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SubmitTaskResponse) GetResult() *TaskResult {
	if x, ok := m.GetResponse().(*SubmitTaskResponse_Result); ok {
		return x.Result
	}
	return nil
}

func (m *SubmitTaskResponse) GetMsg() *ServerMessage {
	if x, ok := m.GetResponse().(*SubmitTaskResponse_Msg); ok {
		return x.Msg
	}
	return nil
}

func (m *SubmitTaskResponse) GetHeartbeat() *Heartbeat {
	if x, ok := m.GetResponse().(*SubmitTaskResponse_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubmitTaskResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubmitTaskResponse_OneofMarshaler, _SubmitTaskResponse_OneofUnmarshaler, _SubmitTaskResponse_OneofSizer, []interface{}{
		(*SubmitTaskResponse_Result)(nil),
		(*SubmitTaskResponse_Msg)(nil),
		(*SubmitTaskResponse_Heartbeat)(nil),
	}
}

func _SubmitTaskResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubmitTaskResponse)
	// response
	switch x := m.Response.(type) {
	case *SubmitTaskResponse_Result:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Result); err != nil {
			return err
		}
	case *SubmitTaskResponse_Msg:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Msg); err != nil {
			return err
		}
	case *SubmitTaskResponse_Heartbeat:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubmitTaskResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _SubmitTaskResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubmitTaskResponse)
	switch tag {
	case 1: // response.result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaskResult)
		err := b.DecodeMessage(msg)
		m.Response = &SubmitTaskResponse_Result{msg}
		return true, err
	case 2: // response.msg
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServerMessage)
		err := b.DecodeMessage(msg)
		m.Response = &SubmitTaskResponse_Msg{msg}
		return true, err
	case 3: // response.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Heartbeat)
		err := b.DecodeMessage(msg)
		m.Response = &SubmitTaskResponse_Heartbeat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubmitTaskResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubmitTaskResponse)
	// response
	switch x := m.Response.(type) {
	case *SubmitTaskResponse_Result:
		s := proto.Size(x.Result)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubmitTaskResponse_Msg:
		s := proto.Size(x.Msg)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubmitTaskResponse_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ExecResult records whether the executor successfully executed the task.
// If there were no errors running the task, uploading the std out/err, etc
// then the exec result is success (even if the task itself failed).
type ExecResult struct {
	Status ExecResult_Status `protobuf:"varint,1,opt,name=status,enum=ExecResult_Status" json:"status,omitempty"`
	ErrMsg string            `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
}

func (m *ExecResult) Reset()                    { *m = ExecResult{} }
func (m *ExecResult) String() string            { return proto.CompactTextString(m) }
func (*ExecResult) ProtoMessage()               {}
func (*ExecResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExecResult) GetStatus() ExecResult_Status {
	if m != nil {
		return m.Status
	}
	return ExecResult_SUCCESS
}

func (m *ExecResult) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type TaskResult struct {
	ExitCode int32  `protobuf:"varint,1,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	JobId    string `protobuf:"bytes,3,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
	TaskId   string `protobuf:"bytes,4,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	// output stores gcs path to output data, added as convenience field
	// for python clients to alleviate need to look up original task spec
	// when new results come in.
	// string output = 5;
	// gcs location containing task stdout
	Stdout string `protobuf:"bytes,6,opt,name=stdout" json:"stdout,omitempty"`
	Stderr string `protobuf:"bytes,7,opt,name=stderr" json:"stderr,omitempty"`
	// result data
	Data       []byte      `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	ExecResult *ExecResult `protobuf:"bytes,9,opt,name=exec_result,json=execResult" json:"exec_result,omitempty"`
}

func (m *TaskResult) Reset()                    { *m = TaskResult{} }
func (m *TaskResult) String() string            { return proto.CompactTextString(m) }
func (*TaskResult) ProtoMessage()               {}
func (*TaskResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TaskResult) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

func (m *TaskResult) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *TaskResult) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskResult) GetStdout() string {
	if m != nil {
		return m.Stdout
	}
	return ""
}

func (m *TaskResult) GetStderr() string {
	if m != nil {
		return m.Stderr
	}
	return ""
}

func (m *TaskResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TaskResult) GetExecResult() *ExecResult {
	if m != nil {
		return m.ExecResult
	}
	return nil
}

// TaskRequest sent by executor to scheduler to request a new task
type TaskRequest struct {
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId" json:"job_id,omitempty"`
}

func (m *TaskRequest) Reset()                    { *m = TaskRequest{} }
func (m *TaskRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()               {}
func (*TaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TaskRequest) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

// initial message sent by executor upon connecting
type ExecutorInit struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ExecutorInit) Reset()                    { *m = ExecutorInit{} }
func (m *ExecutorInit) String() string            { return proto.CompactTextString(m) }
func (*ExecutorInit) ProtoMessage()               {}
func (*ExecutorInit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ExecutorInit) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ExecutorInit) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ExecutorRequest struct {
	// Types that are valid to be assigned to Action:
	//	*ExecutorRequest_TaskResult
	//	*ExecutorRequest_TaskRequest
	//	*ExecutorRequest_ExecutorInit
	//	*ExecutorRequest_Heartbeat
	Action isExecutorRequest_Action `protobuf_oneof:"action"`
}

func (m *ExecutorRequest) Reset()                    { *m = ExecutorRequest{} }
func (m *ExecutorRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecutorRequest) ProtoMessage()               {}
func (*ExecutorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isExecutorRequest_Action interface {
	isExecutorRequest_Action()
}

type ExecutorRequest_TaskResult struct {
	TaskResult *TaskResult `protobuf:"bytes,1,opt,name=task_result,json=taskResult,oneof"`
}
type ExecutorRequest_TaskRequest struct {
	TaskRequest *TaskRequest `protobuf:"bytes,2,opt,name=task_request,json=taskRequest,oneof"`
}
type ExecutorRequest_ExecutorInit struct {
	ExecutorInit *ExecutorInit `protobuf:"bytes,3,opt,name=executor_init,json=executorInit,oneof"`
}
type ExecutorRequest_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,oneof"`
}

func (*ExecutorRequest_TaskResult) isExecutorRequest_Action()   {}
func (*ExecutorRequest_TaskRequest) isExecutorRequest_Action()  {}
func (*ExecutorRequest_ExecutorInit) isExecutorRequest_Action() {}
func (*ExecutorRequest_Heartbeat) isExecutorRequest_Action()    {}

func (m *ExecutorRequest) GetAction() isExecutorRequest_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *ExecutorRequest) GetTaskResult() *TaskResult {
	if x, ok := m.GetAction().(*ExecutorRequest_TaskResult); ok {
		return x.TaskResult
	}
	return nil
}

func (m *ExecutorRequest) GetTaskRequest() *TaskRequest {
	if x, ok := m.GetAction().(*ExecutorRequest_TaskRequest); ok {
		return x.TaskRequest
	}
	return nil
}

func (m *ExecutorRequest) GetExecutorInit() *ExecutorInit {
	if x, ok := m.GetAction().(*ExecutorRequest_ExecutorInit); ok {
		return x.ExecutorInit
	}
	return nil
}

func (m *ExecutorRequest) GetHeartbeat() *Heartbeat {
	if x, ok := m.GetAction().(*ExecutorRequest_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecutorRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecutorRequest_OneofMarshaler, _ExecutorRequest_OneofUnmarshaler, _ExecutorRequest_OneofSizer, []interface{}{
		(*ExecutorRequest_TaskResult)(nil),
		(*ExecutorRequest_TaskRequest)(nil),
		(*ExecutorRequest_ExecutorInit)(nil),
		(*ExecutorRequest_Heartbeat)(nil),
	}
}

func _ExecutorRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecutorRequest)
	// action
	switch x := m.Action.(type) {
	case *ExecutorRequest_TaskResult:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaskResult); err != nil {
			return err
		}
	case *ExecutorRequest_TaskRequest:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaskRequest); err != nil {
			return err
		}
	case *ExecutorRequest_ExecutorInit:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExecutorInit); err != nil {
			return err
		}
	case *ExecutorRequest_Heartbeat:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecutorRequest.Action has unexpected type %T", x)
	}
	return nil
}

func _ExecutorRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecutorRequest)
	switch tag {
	case 1: // action.task_result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaskResult)
		err := b.DecodeMessage(msg)
		m.Action = &ExecutorRequest_TaskResult{msg}
		return true, err
	case 2: // action.task_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaskRequest)
		err := b.DecodeMessage(msg)
		m.Action = &ExecutorRequest_TaskRequest{msg}
		return true, err
	case 3: // action.executor_init
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExecutorInit)
		err := b.DecodeMessage(msg)
		m.Action = &ExecutorRequest_ExecutorInit{msg}
		return true, err
	case 4: // action.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Heartbeat)
		err := b.DecodeMessage(msg)
		m.Action = &ExecutorRequest_Heartbeat{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecutorRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecutorRequest)
	// action
	switch x := m.Action.(type) {
	case *ExecutorRequest_TaskResult:
		s := proto.Size(x.TaskResult)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutorRequest_TaskRequest:
		s := proto.Size(x.TaskRequest)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutorRequest_ExecutorInit:
		s := proto.Size(x.ExecutorInit)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutorRequest_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Heartbeat struct {
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type Shutdown struct {
}

func (m *Shutdown) Reset()                    { *m = Shutdown{} }
func (m *Shutdown) String() string            { return proto.CompactTextString(m) }
func (*Shutdown) ProtoMessage()               {}
func (*Shutdown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ExecutorResponse struct {
	// Types that are valid to be assigned to Response:
	//	*ExecutorResponse_TaskSpec
	//	*ExecutorResponse_Heartbeat
	//	*ExecutorResponse_Shutdown
	Response isExecutorResponse_Response `protobuf_oneof:"response"`
}

func (m *ExecutorResponse) Reset()                    { *m = ExecutorResponse{} }
func (m *ExecutorResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecutorResponse) ProtoMessage()               {}
func (*ExecutorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type isExecutorResponse_Response interface {
	isExecutorResponse_Response()
}

type ExecutorResponse_TaskSpec struct {
	TaskSpec *TaskSpec `protobuf:"bytes,1,opt,name=task_spec,json=taskSpec,oneof"`
}
type ExecutorResponse_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,2,opt,name=heartbeat,oneof"`
}
type ExecutorResponse_Shutdown struct {
	Shutdown *Shutdown `protobuf:"bytes,3,opt,name=shutdown,oneof"`
}

func (*ExecutorResponse_TaskSpec) isExecutorResponse_Response()  {}
func (*ExecutorResponse_Heartbeat) isExecutorResponse_Response() {}
func (*ExecutorResponse_Shutdown) isExecutorResponse_Response()  {}

func (m *ExecutorResponse) GetResponse() isExecutorResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ExecutorResponse) GetTaskSpec() *TaskSpec {
	if x, ok := m.GetResponse().(*ExecutorResponse_TaskSpec); ok {
		return x.TaskSpec
	}
	return nil
}

func (m *ExecutorResponse) GetHeartbeat() *Heartbeat {
	if x, ok := m.GetResponse().(*ExecutorResponse_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *ExecutorResponse) GetShutdown() *Shutdown {
	if x, ok := m.GetResponse().(*ExecutorResponse_Shutdown); ok {
		return x.Shutdown
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ExecutorResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ExecutorResponse_OneofMarshaler, _ExecutorResponse_OneofUnmarshaler, _ExecutorResponse_OneofSizer, []interface{}{
		(*ExecutorResponse_TaskSpec)(nil),
		(*ExecutorResponse_Heartbeat)(nil),
		(*ExecutorResponse_Shutdown)(nil),
	}
}

func _ExecutorResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ExecutorResponse)
	// response
	switch x := m.Response.(type) {
	case *ExecutorResponse_TaskSpec:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TaskSpec); err != nil {
			return err
		}
	case *ExecutorResponse_Heartbeat:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case *ExecutorResponse_Shutdown:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Shutdown); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ExecutorResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _ExecutorResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ExecutorResponse)
	switch tag {
	case 1: // response.task_spec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TaskSpec)
		err := b.DecodeMessage(msg)
		m.Response = &ExecutorResponse_TaskSpec{msg}
		return true, err
	case 2: // response.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Heartbeat)
		err := b.DecodeMessage(msg)
		m.Response = &ExecutorResponse_Heartbeat{msg}
		return true, err
	case 3: // response.shutdown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Shutdown)
		err := b.DecodeMessage(msg)
		m.Response = &ExecutorResponse_Shutdown{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ExecutorResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ExecutorResponse)
	// response
	switch x := m.Response.(type) {
	case *ExecutorResponse_TaskSpec:
		s := proto.Size(x.TaskSpec)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutorResponse_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ExecutorResponse_Shutdown:
		s := proto.Size(x.Shutdown)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*JobSpec)(nil), "JobSpec")
	proto.RegisterType((*Resources)(nil), "Resources")
	proto.RegisterType((*TaskSpec)(nil), "TaskSpec")
	proto.RegisterType((*JobItem)(nil), "JobItem")
	proto.RegisterType((*TaskData)(nil), "TaskData")
	proto.RegisterType((*ServerMessage)(nil), "ServerMessage")
	proto.RegisterType((*SubmitTaskResponse)(nil), "SubmitTaskResponse")
	proto.RegisterType((*ExecResult)(nil), "ExecResult")
	proto.RegisterType((*TaskResult)(nil), "TaskResult")
	proto.RegisterType((*TaskRequest)(nil), "TaskRequest")
	proto.RegisterType((*ExecutorInit)(nil), "ExecutorInit")
	proto.RegisterType((*ExecutorRequest)(nil), "ExecutorRequest")
	proto.RegisterType((*Heartbeat)(nil), "Heartbeat")
	proto.RegisterType((*Shutdown)(nil), "Shutdown")
	proto.RegisterType((*ExecutorResponse)(nil), "ExecutorResponse")
	proto.RegisterEnum("ExecResult_Status", ExecResult_Status_name, ExecResult_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExecutorService service

type ExecutorServiceClient interface {
	Tasks(ctx context.Context, opts ...grpc.CallOption) (ExecutorService_TasksClient, error)
}

type executorServiceClient struct {
	cc *grpc.ClientConn
}

func NewExecutorServiceClient(cc *grpc.ClientConn) ExecutorServiceClient {
	return &executorServiceClient{cc}
}

func (c *executorServiceClient) Tasks(ctx context.Context, opts ...grpc.CallOption) (ExecutorService_TasksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExecutorService_serviceDesc.Streams[0], c.cc, "/ExecutorService/Tasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &executorServiceTasksClient{stream}
	return x, nil
}

type ExecutorService_TasksClient interface {
	Send(*ExecutorRequest) error
	Recv() (*ExecutorResponse, error)
	grpc.ClientStream
}

type executorServiceTasksClient struct {
	grpc.ClientStream
}

func (x *executorServiceTasksClient) Send(m *ExecutorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *executorServiceTasksClient) Recv() (*ExecutorResponse, error) {
	m := new(ExecutorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExecutorService service

type ExecutorServiceServer interface {
	Tasks(ExecutorService_TasksServer) error
}

func RegisterExecutorServiceServer(s *grpc.Server, srv ExecutorServiceServer) {
	s.RegisterService(&_ExecutorService_serviceDesc, srv)
}

func _ExecutorService_Tasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExecutorServiceServer).Tasks(&executorServiceTasksServer{stream})
}

type ExecutorService_TasksServer interface {
	Send(*ExecutorResponse) error
	Recv() (*ExecutorRequest, error)
	grpc.ServerStream
}

type executorServiceTasksServer struct {
	grpc.ServerStream
}

func (x *executorServiceTasksServer) Send(m *ExecutorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *executorServiceTasksServer) Recv() (*ExecutorRequest, error) {
	m := new(ExecutorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExecutorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ExecutorService",
	HandlerType: (*ExecutorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tasks",
			Handler:       _ExecutorService_Tasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// Client API for TaskGateway service

type TaskGatewayClient interface {
	// SubmitTasks opens bidirectional stream for client to stream tasks
	// to server for execution, and server to send back task results to client.
	//
	// The very first message should be a job spec, which details how to run
	// the job.
	SubmitTasks(ctx context.Context, opts ...grpc.CallOption) (TaskGateway_SubmitTasksClient, error)
}

type taskGatewayClient struct {
	cc *grpc.ClientConn
}

func NewTaskGatewayClient(cc *grpc.ClientConn) TaskGatewayClient {
	return &taskGatewayClient{cc}
}

func (c *taskGatewayClient) SubmitTasks(ctx context.Context, opts ...grpc.CallOption) (TaskGateway_SubmitTasksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskGateway_serviceDesc.Streams[0], c.cc, "/TaskGateway/SubmitTasks", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskGatewaySubmitTasksClient{stream}
	return x, nil
}

type TaskGateway_SubmitTasksClient interface {
	Send(*JobItem) error
	Recv() (*SubmitTaskResponse, error)
	grpc.ClientStream
}

type taskGatewaySubmitTasksClient struct {
	grpc.ClientStream
}

func (x *taskGatewaySubmitTasksClient) Send(m *JobItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *taskGatewaySubmitTasksClient) Recv() (*SubmitTaskResponse, error) {
	m := new(SubmitTaskResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TaskGateway service

type TaskGatewayServer interface {
	// SubmitTasks opens bidirectional stream for client to stream tasks
	// to server for execution, and server to send back task results to client.
	//
	// The very first message should be a job spec, which details how to run
	// the job.
	SubmitTasks(TaskGateway_SubmitTasksServer) error
}

func RegisterTaskGatewayServer(s *grpc.Server, srv TaskGatewayServer) {
	s.RegisterService(&_TaskGateway_serviceDesc, srv)
}

func _TaskGateway_SubmitTasks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TaskGatewayServer).SubmitTasks(&taskGatewaySubmitTasksServer{stream})
}

type TaskGateway_SubmitTasksServer interface {
	Send(*SubmitTaskResponse) error
	Recv() (*JobItem, error)
	grpc.ServerStream
}

type taskGatewaySubmitTasksServer struct {
	grpc.ServerStream
}

func (x *taskGatewaySubmitTasksServer) Send(m *SubmitTaskResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *taskGatewaySubmitTasksServer) Recv() (*JobItem, error) {
	m := new(JobItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TaskGateway_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TaskGateway",
	HandlerType: (*TaskGatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitTasks",
			Handler:       _TaskGateway_SubmitTasks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x8e, 0xe3, 0x44,
	0x10, 0x8e, 0x67, 0x13, 0xc7, 0x2e, 0x67, 0x86, 0xd0, 0xc0, 0x12, 0x16, 0x21, 0x86, 0x16, 0x2b,
	0xa2, 0x15, 0xb2, 0xd8, 0xc0, 0x01, 0x89, 0xd3, 0xee, 0x30, 0x90, 0x20, 0xf6, 0xd2, 0x86, 0xb3,
	0xd5, 0xb1, 0x4b, 0xb3, 0x3d, 0xc4, 0x3f, 0x74, 0xb7, 0x99, 0xe1, 0x31, 0x38, 0x71, 0x81, 0x27,
	0xe2, 0x25, 0x78, 0x14, 0xd4, 0x3f, 0x1e, 0x3b, 0x8b, 0x94, 0x5b, 0x57, 0x55, 0x57, 0xd7, 0xf7,
	0x55, 0x7d, 0x65, 0x43, 0xcc, 0x5b, 0x91, 0xb6, 0xb2, 0xd1, 0x0d, 0xfd, 0x2b, 0x80, 0xf9, 0x0f,
	0xcd, 0x3e, 0x6b, 0xb1, 0x20, 0x04, 0xa6, 0x35, 0xaf, 0x70, 0x15, 0x5c, 0x06, 0xeb, 0x98, 0xd9,
	0x33, 0xf9, 0x10, 0xe2, 0xba, 0xab, 0x72, 0xcd, 0xd5, 0x2f, 0x6a, 0x75, 0x76, 0x19, 0xac, 0x67,
	0x2c, 0xaa, 0xbb, 0xea, 0x27, 0x63, 0x93, 0x4b, 0x48, 0x5a, 0x2e, 0xf9, 0xe1, 0x80, 0x07, 0xa1,
	0xaa, 0xd5, 0x23, 0x1b, 0x1e, 0xbb, 0xc8, 0xbb, 0x30, 0x13, 0x15, 0xbf, 0xc1, 0xd5, 0xd4, 0xbe,
	0xe9, 0x0c, 0xb2, 0x86, 0x58, 0xa2, 0x6a, 0x3a, 0x59, 0xa0, 0x5a, 0xcd, 0x2e, 0x83, 0x75, 0xb2,
	0x81, 0x94, 0xf5, 0x1e, 0x36, 0x04, 0xe9, 0x73, 0x88, 0x1f, 0xfc, 0x06, 0x5f, 0xd1, 0x76, 0xaa,
	0xc7, 0x67, 0xce, 0x64, 0x09, 0x8f, 0x2a, 0xac, 0x2c, 0xb2, 0x98, 0x99, 0x23, 0xfd, 0x23, 0x80,
	0xc8, 0xc0, 0xb3, 0x94, 0xde, 0x87, 0xb9, 0x81, 0x9e, 0x8b, 0xd2, 0x67, 0x85, 0xc6, 0xdc, 0x95,
	0xe4, 0x23, 0x98, 0x96, 0x5c, 0x73, 0x9b, 0x98, 0x6c, 0xe2, 0xd4, 0x64, 0x7c, 0xcb, 0x35, 0x67,
	0xd6, 0x4d, 0x56, 0x30, 0x2f, 0x9a, 0xaa, 0xe2, 0x75, 0x69, 0x59, 0xc5, 0xac, 0x37, 0x4d, 0x44,
	0xa2, 0x96, 0x02, 0x95, 0xe5, 0x34, 0x63, 0xbd, 0x49, 0x3e, 0x80, 0x48, 0xf2, 0xbb, 0xdc, 0x3e,
	0x6b, 0x48, 0x2d, 0xd8, 0x5c, 0xf2, 0x3b, 0xf3, 0x28, 0xdd, 0xdb, 0x26, 0xef, 0x34, 0x56, 0xe4,
	0x29, 0x44, 0xb7, 0xcd, 0x3e, 0x57, 0x2d, 0x16, 0x16, 0x52, 0xb2, 0x89, 0x52, 0x3f, 0x80, 0xed,
	0x84, 0xcd, 0x6f, 0xfd, 0x2c, 0xd6, 0x10, 0x5b, 0xe0, 0xf6, 0xde, 0x18, 0xa4, 0xbf, 0x18, 0x69,
	0x7f, 0x7e, 0x19, 0xc2, 0x54, 0x68, 0xac, 0xe8, 0xd7, 0x8e, 0xb6, 0xa9, 0x67, 0xdb, 0x5e, 0xb7,
	0x9d, 0xf6, 0xa4, 0x9d, 0x41, 0x1e, 0x43, 0xd8, 0x74, 0xda, 0xb8, 0x5d, 0xbb, 0xbc, 0x45, 0x3f,
	0x81, 0xf3, 0x0c, 0xe5, 0x6f, 0x28, 0x5f, 0xa1, 0x52, 0x66, 0x3e, 0xa6, 0xa9, 0xea, 0xc6, 0x27,
	0x9b, 0x23, 0xfd, 0x33, 0x00, 0x92, 0x75, 0xfb, 0x4a, 0x68, 0x53, 0x83, 0xa1, 0x6a, 0x9b, 0x5a,
	0x21, 0x79, 0x0a, 0xa1, 0x44, 0xd5, 0x1d, 0xb4, 0xa7, 0x92, 0xa4, 0x3e, 0xdc, 0x1d, 0xf4, 0x76,
	0xc2, 0x7c, 0x90, 0x50, 0xf7, 0x9e, 0xa3, 0x71, 0x91, 0x1e, 0x15, 0xdb, 0x4e, 0x6c, 0x05, 0xf2,
	0x0c, 0xe2, 0xd7, 0xc8, 0xa5, 0xde, 0x23, 0xd7, 0xb6, 0xe7, 0x46, 0x13, 0xdb, 0xde, 0xb3, 0x9d,
	0xb0, 0x21, 0xfc, 0x12, 0x20, 0x92, 0x1e, 0x02, 0x95, 0x00, 0xd7, 0xf7, 0x58, 0xb8, 0x9a, 0xe4,
	0x19, 0x84, 0x4a, 0x73, 0xed, 0x45, 0x72, 0xb1, 0x21, 0xe9, 0x10, 0x4c, 0x33, 0x1b, 0x61, 0xfe,
	0x86, 0xd1, 0x06, 0x4a, 0x99, 0xf7, 0xc8, 0x62, 0x16, 0xa2, 0x94, 0xaf, 0xd4, 0x0d, 0xfd, 0x18,
	0x42, 0x77, 0x95, 0x24, 0x30, 0xcf, 0x7e, 0xbe, 0xba, 0xba, 0xce, 0xb2, 0xe5, 0x84, 0x44, 0x30,
	0xfd, 0xee, 0xc5, 0xee, 0xc7, 0x65, 0x40, 0xff, 0x09, 0x00, 0x06, 0xa2, 0x66, 0x47, 0xf0, 0x5e,
	0xe8, 0xbc, 0x68, 0x4a, 0xb7, 0x3c, 0x33, 0x16, 0x19, 0xc7, 0x55, 0x53, 0x22, 0x79, 0x0f, 0x42,
	0x33, 0x6f, 0xd1, 0x0b, 0x69, 0x76, 0xdb, 0xec, 0x77, 0xe5, 0x58, 0x98, 0xd3, 0x23, 0x61, 0x3e,
	0x36, 0x0c, 0xca, 0xa6, 0xd3, 0xab, 0xd0, 0xf9, 0x9d, 0xe5, 0xfd, 0x28, 0xe5, 0x6a, 0xfe, 0xe0,
	0x47, 0x29, 0xcd, 0x52, 0x58, 0xc5, 0x45, 0x56, 0x71, 0x4e, 0xbd, 0x9f, 0x43, 0x82, 0xf7, 0x58,
	0xe4, 0x7e, 0x36, 0xb1, 0x9f, 0xcd, 0xd0, 0x0a, 0x06, 0xf8, 0x70, 0xa6, 0x9f, 0x42, 0xe2, 0xc8,
	0xfc, 0xda, 0xa1, 0xd2, 0x23, 0xc0, 0xc1, 0x08, 0x30, 0xfd, 0x06, 0x16, 0x26, 0xbf, 0xd3, 0x8d,
	0xdc, 0xd5, 0xc2, 0x92, 0x2e, 0x0e, 0x02, 0x6b, 0x3d, 0xdc, 0x8c, 0x9c, 0x63, 0x57, 0x92, 0x0b,
	0x38, 0x13, 0xa5, 0xef, 0xea, 0x99, 0x28, 0xe9, 0xbf, 0x01, 0xbc, 0xd5, 0x67, 0xf7, 0x75, 0x52,
	0x48, 0x6c, 0x07, 0x4e, 0x09, 0x08, 0xf4, 0xd0, 0xe5, 0xe7, 0xb0, 0xf0, 0xf7, 0x6d, 0xbe, 0x57,
	0xd3, 0x22, 0x1d, 0x61, 0xdf, 0x4e, 0x58, 0xa2, 0x47, 0x54, 0xbe, 0x82, 0x73, 0xf4, 0x55, 0x73,
	0x51, 0x8b, 0x5e, 0x57, 0xe7, 0xe9, 0x98, 0xc9, 0x76, 0xc2, 0x16, 0x38, 0x66, 0x76, 0xa4, 0xc4,
	0xe9, 0x69, 0x25, 0x46, 0x10, 0xf2, 0x42, 0x8b, 0xa6, 0xa6, 0x09, 0xc4, 0x0f, 0x77, 0x28, 0x40,
	0x94, 0xbd, 0xee, 0x74, 0xd9, 0xdc, 0xd5, 0xf4, 0xef, 0x00, 0x96, 0x03, 0x77, 0xbf, 0x38, 0x47,
	0xeb, 0x1d, 0x9c, 0x58, 0xef, 0x63, 0x34, 0x67, 0x27, 0xd1, 0x90, 0xcf, 0x20, 0x52, 0xbe, 0xac,
	0xa7, 0x1a, 0xa7, 0x3d, 0x0e, 0xf3, 0x68, 0x1f, 0x1c, 0x2f, 0xd0, 0xe6, 0x7a, 0x18, 0x8d, 0x59,
	0x4c, 0x51, 0x20, 0xd9, 0xc0, 0xcc, 0x7d, 0xe0, 0x97, 0xe9, 0x1b, 0x53, 0x7b, 0xf2, 0x76, 0xfa,
	0x26, 0x17, 0x3a, 0x59, 0x07, 0x5f, 0x04, 0x9b, 0x17, 0x4e, 0x45, 0xdf, 0x73, 0x8d, 0x77, 0xfc,
	0x77, 0xb2, 0x81, 0x64, 0xf8, 0x5e, 0x28, 0x62, 0xbf, 0x71, 0xe6, 0xfb, 0xf7, 0xe4, 0x9d, 0xf4,
	0xff, 0xdf, 0x11, 0xf7, 0xc4, 0x3e, 0xb4, 0xbf, 0xa4, 0x2f, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x7b, 0x7d, 0x9b, 0xc5, 0x9f, 0x06, 0x00, 0x00,
}
